% Computational Vision
% 2014-2015
%
% Javier Fern?ndez, Alejandro Hern?ndez
%
% >> OBJECTIVE: 
% 1) Write the code for Exercise 2
% 2) Execute the code and check the results
% 3) Comment the experiments and results in a report

% main function
function FD_ex2()


clc; close all; clear;

%% Initialization
% Define Viola & Jones parameters for the first two feature masks
% SEE THE ATTACHED IMAGE FOR DETAILS!!!
L = 110;                         % mask size [px]
d1 = 20; d2 = 20; d3 = 30; d4 = 10; d5=10; d6=10; d7=10; d8=20;d9=10; % distances from the border
w1 = 70; w2 = 30; w3 = 30; w4=90; w5=45; w6=10; w7=40;       % width of the rectangles
h1 = 15; h2 = 30; h3=h1; h4=h1+2; h5=10; h6=20; h7=23; h8=24;% height of the rectangles
  

%% Draw the 2 feature masks (just for visualization purpose)
input('Press enter to visualize the two defined rectangular masks');
m1 = zeros(L,L);
m2 = zeros(L,L);
m3 = zeros(L,L);
m4 = zeros(L,L);
m5 = zeros(L,L);
m6 = zeros(L,L);

m1(d1+1:d1+h1,d2+1:d2+w1) = 1;
m1(d1+1+h1:d1+2*h1,d2+1:d2+w1) = 2;
figure('name','First rectangular mask');
imagesc(m1);
title('Rectangluar mask for feature 1');
axis square;
colormap([128 128 128; 0 0 0; 255 255 255]/255);

m2(d3+1:d3+h2,d4+1:d4+w2) = 1;
m2(d3+1:d3+h2,d4+w2+1:d4+w2+w3) = 2;
m2(d3+1:d3+h2,d4+w2+w3+1:d4+2*w2+w3) = 1;
figure('name','Second rectangular mask');
imagesc(m2);
title('Rectangluar mask for feature 2');
axis square;
colormap([128 128 128; 0 0 0; 255 255 255]/255);

m3(d5+1:d5+h3,d5+1:d5+w4) = 1;
m3(d5+1+h3:d5+2*h4,d5+1:d5+w4) = 2;
m3(d5+1+h4+h3:d5+h4+2*h3,d5+1:d5+w4) = 1;
figure('name','Third rectangular mask');
imagesc(m3);
title('Rectangluar mask for feature 3');
axis square;
colormap([128 128 128; 0 0 0; 255 255 255]/255);

m4(d6+1:d6+h5,d6+1:d6+w5) = 1;
m4(d6+1+h5:d6+2*h5,d6+1:d6+w5) = 2;
m4(d6+1:d6+h5,d6+w5+1:d6+2*w5) = 2;
m4(d6+1+h5:d6+2*h5,d6+w5+1:d6+2*w5) = 1;
figure('name','Fourth rectangular mask');
imagesc(m4);
title('Rectangluar mask for feature 4');
axis square;
colormap([128 128 128; 0 0 0; 255 255 255]/255);

m5(d7+1:d7+h6,d8+1:d8+w6) = 1;
m5(d7+1+h6:d7+h6+h7,d8+1:d8+w6) = 2;
m5(d7+1+h6+h7:d7+2*h6+h7,d8+1:d8+w6) = 1;
figure('name','Fifth rectangular mask');
imagesc(m5);
title('Rectangluar mask for feature 5');
axis square;
colormap([128 128 128; 0 0 0; 255 255 255]/255);

m6(d9+1:d9+h8,d9+1:d9+w7) = 1;
m6(d9+1:d9+h8,d9+w7+1:d9+2*w7) = 2;
figure('name','Sixth rectangular mask');
imagesc(m6);
title('Rectangluar mask for feature 6');
axis square;
colormap([128 128 128; 0 0 0; 255 255 255]/255);

%% Load image, compute Integral Image and visualize it

% Load image 'barcelona.jpg' and convert image from rgb to grayscale
I = imread('barcelona.jpg');

input('Press enter to see the integral image for barcelona.jpg');

% Compute the Integral Image
S = cumsum(cumsum(double(I),2));
figure('name','Integral Image for barcelona.jpg');

% computing integral image between 0 and 1
S01 = (S-min(S(:)))/(max(S(:))+min(S(:)));
imagesc(S01);
title('barcelona.jpg integral image');

%% Compute features for regions with faces

input('Press enter to compute the two features values for face regions');

% (X,Y) coordinates of the top-left corner of windows with face
XY_FACE = [242 129; 439 135; 673 102; 879 172; 1123 151; 1279 130; 161 300; 349 526; 659 523; 943 535; 1252 562]; % [x1 y1; x2 y2 .....]

% Initialize the feature matrix for faces
FEAT_FACE = [];

for i = 1:size(XY_FACE,1)
    
    % current top-left corner coordinates
    x = XY_FACE(i,1);
    y = XY_FACE(i,2);
    
    % compute area of regions A and B for the first feature
    % HERE WE USE INTEGRAL IMAGE!
    %area_A = S(y+d1+h1,x+d2+w1) - S(y+d1+1,x+d2+w1) - (S(y+d1+h1,x+d2+1) - S(y+d1+1,x+d2+1));
    %area_B = S(y+2*h1+d1,x+w1+d2) - S(y+d1+h1+1,x+d2+w1) - (S(y+d1+2*h1,x+d2+1)-S(y+d1+h1+1,x+d2+1));
    
    area_A = getRectangleArea(S,y,x,d1,d2,h1,w1);
    area_B = getRectangleArea(S,y+h1,x,d1,d2,h1,w1);
    
    % compute area of regions C, D and E for the second feature
    % HERE WE USE INTEGRAL IMAGE!
    
    %area_C = S(y+d3+h2,x+d4+w2) - S(y+d3+1,x+d4+w2) - (S(y+d3+h2,x+d4+1) - S(y+d3+1,x+d4+1));
    %area_D = S(y+d3+h2,x+d4+w2+w3) - S(y+d3+1,x+d4+w2+w3) - (S(y+d3+h2,x+d4+w2+1) - S(y+d3+1,x+d4+w2+1));
    %area_E = S(y+d3+h2,x+d4+2*w2+w3) - S(y+d3+1,x+d4+2*w2+w3) - (S(y+d3+h2,x+d4+w2+w3+1) - S(y+d3+1,x+d4+w2+w3+1));
            
    
    area_C = getRectangleArea(S,y,x,d3,d4,h2,w2);
    area_D = getRectangleArea(S,y,x+w2,d3,d4,h2,w3);
    area_E = getRectangleArea(S,y,x+w2+w3,d3,d4,h2,w2);
    
    
%     % compute area of regions F, G and H for the third feature
%     area_F = getRectangleArea(S,x,y,d5,d5,h3,w4);
%     area_G = getRectangleArea(S,x+h3,y,d5,d5,h4,w4);
%     area_H = getRectangleArea(S,x+h3+h4,y,d5,d5,h3,w4);
%     
%     % compute area of regions H, J, K, L for the fourth feature
%     area_I = getRectangleArea(S,x,y,d6,d6,h5,w5);
%     area_J = getRectangleArea(S,x,y+w5,d6,d6,h5,w5);
%     area_K = getRectangleArea(S,x+h5,y,d6,d6,h5,w5);
%     area_L = getRectangleArea(S,x+h5,y+w5,d6,d6,h5,w5);
%    
%     % compute area of regions M, N, O for the fifth feature
%     area_M = getRectangleArea(S,x,y,d7,d8,h6,w6);
%     area_N = getRectangleArea(S,x+h6,y,d7,d8,h7,w6);
%     area_O = getRectangleArea(S,x+h6+h7,y,d7,d8,h6,w6);  
%     
%     % compute area of regions P, Q for the sixth feature
%     area_P = getRectangleArea(S,x,y,d9,d9,h8,w7);
%     area_Q = getRectangleArea(S,x,y+w7,d9,d9,h8,w7); 
        
    
    % compute features value
    F1 = area_B - area_A;
    F2 = area_D - (area_C + area_E);
%     F3 = area_G - (area_F + area_H);
%     F4 = (area_J + area_K) - (area_I + area_L); 
%     F5 = area_N - (area_M + area_O);
%     F6 = area_Q - area_P;
    
    % cumulate the computed values
    FEAT_FACE = [FEAT_FACE; [F1 F2]];
end

disp('Feature face vector');
disp(FEAT_FACE);

%% Compute features for regions with non-faces
input('Press enter to compute the two features values for non-face regions');

% (X,Y) coordinates of the top-left corner of windows with non-face
XY_NON_FACE = [29 30; 454 409; 685 366; 988 27; 1445 30; 1123 436; 1033 1081; 842 1091; 347 1075; 116 582];

% Initialize the feature matrix for non-faces
FEAT_NON_FACE = [];

for i = 1:size(XY_NON_FACE,1)
    
    % current top-left corner coordinates
    x = XY_NON_FACE(i,1); y = XY_NON_FACE(i,2);
    
    
    % compute area of regions A and B for the first feature
    % HERE WE USE INTEGRAL IMAGE!
    area_A = getRectangleArea(S,y,x,d1,d2,h1,w1);
    area_B = getRectangleArea(S,y+h1,x,d1,d2,h1,w1);
    
    %area_A = S(y+d1+h1,x+d2+w1) - S(y+d1+1,x+d2+w1) - (S(y+d1+h1,x+d2+1) - S(y+d1+1,x+d2+1))
    %area_B = S(y+2*h1+d1,x+w1+d2) - S(y+d1+h1+1,x+d2+w1) - (S(y+d1+2*h1,x+d2+1)-S(y+d1+h1+1,x+d2+1))
    
    disp('----------');
    
    % compute area of regions C, D and E for the second feature
    % HERE WE USE INTEGRAL IMAGE!
    
    area_C = getRectangleArea(S,y,x,d3,d4,h2,w2)
    area_D = getRectangleArea(S,y,x+w2,d3,d4,h2,w3)
    area_E = getRectangleArea(S,y,x+w2+w3,d3,d4,h2,w2)
    
    x44=S(y+d3+h2,x+d4+w2)
    x22=S(y+d3+1,x+d4+w2)
    x33=
    x11=
    
    area_C = S(y+d3+h2,x+d4+w2) - S(y+d3+1,x+d4+w2) - (S(y+d3+h2,x+d4+1) - S(y+d3+1,x+d4+1))
    area_D = S(y+d3+h2,x+d4+w2+w3) - S(y+d3+1,x+d4+w2+w3) - (S(y+d3+h2,x+d4+w2+1) - S(y+d3+1,x+d4+w2+1))
    area_E = S(y+d3+h2,x+d4+2*w2+w3) - S(y+d3+1,x+d4+2*w2+w3) - (S(y+d3+h2,x+d4+w2+w3+1) - S(y+d3+1,x+d4+w2+w3+1))
            

       
    
    % compute features value
    F1 = area_B - area_A;
    F2 = area_D - (area_C + area_E);

    
    % cumulate the computed values
    FEAT_NON_FACE = [FEAT_NON_FACE; [F1 F2]];
end
disp('Non-face features');
disp(FEAT_NON_FACE);

% %% Visualize samples in the feature space
% input('Press enter to visualize face and non-face features in the feature space');
% figure('name','Face and non-face feature space for the different samples')
% hold on
% scatter(FEAT_FACE(:,1),FEAT_FACE(:,2),'g');
% scatter(FEAT_NON_FACE(:,1),FEAT_NON_FACE(:,2),'r');
% xlabel('Feature 1');
% ylabel('Feature 2');
% title('Feature space');

%
% %% Visualize image with used regions
% input('Press enter to visualize face and non-face features over the image');
% figure('name','Face and non-face for the different samples over the image')
% imshow(I);
%
% % patches with faces
% for i = 1:size(XY_FACE,1)
%     PATCH = [XY_FACE(i,:) L L];
%     Rectangle = [PATCH(1) PATCH(2); PATCH(1)+PATCH(3) PATCH(2); PATCH(1)+PATCH(3) PATCH(2)+PATCH(4); PATCH(1)  PATCH(2)+PATCH(4); PATCH(1) PATCH(2)];
%     hold on;
%     plot (Rectangle(:,1), Rectangle(:,2), 'g');
%     hold off;
% end
%
% % patches without faces
% for i = 1:size(XY_NON_FACE,1)
%     PATCH = [XY_NON_FACE(i,:) L L];
%     Rectangle = [PATCH(1) PATCH(2); PATCH(1)+PATCH(3) PATCH(2); PATCH(1)+PATCH(3) PATCH(2)+PATCH(4); PATCH(1)  PATCH(2)+PATCH(4); PATCH(1) PATCH(2)];
%     hold on;
%     plot (Rectangle(:,1), Rectangle(:,2), 'r');
%     hold off;
% end


%% Part 2:
% Testing madrid.jpg as test image

input('Press enter to test madrid image on classifier');
I = imread('madrid.jpg');

% Madrid manually obtained mask points
x1 = [201;389;695;1015;1190;1218;1032;807;603;431;207;63;59;519;857;1007;1274;1492;1446;371;49;859;]
y1 = [171;231;231;313;209;71;67;83;105;91;63;31;479;716;514;447;493;227;610;894;850;403;]


maskInfo = [L,d1,d2,d3,d4,w1,w2,w3,h1,h2];
trainAndClassify(FEAT_FACE,FEAT_NON_FACE,I,x1,y1,maskInfo);


end
