function [] = trainAndClassify(FEAT_FACE,FEAT_NON_FACE, I, x1, y1, maskIn)
 %% Define the new regions of the test image 

    % Load image 'madrid.jpg' and convert image from rgb to grayscale 
    %I = imread('madrid.jpg');

    % Compute the Integral Image
    S = cumsum(cumsum(double(I),2));
    imshow(I);

    % Select regions with FACES and NON-FACES
    %[x1, y1] = ginput()
    

    %(X,Y) coordinates of the top-left corner of windows with face
    XY_TEST = [x1 y1];

    %% Compute features for these new regions

    % Initialize the feature matrix for faces
    FEAT_TEST = [];

    for i = 1:size(XY_TEST,1)

        % current top-left corner coordinates
        x = XY_TEST(i,1);
        y = XY_TEST(i,2);

        % compute area of regions A and B for the first feature
        % HERE WE USE INTEGRAL IMAGE!
        area_A = S(y+d1+h1,x+d2+w1) - S(y+d1+1,x+d2+w1) - (S(y+d1+h1,x+d2+1) - S(y+d1+1,x+d2+1));
        area_B = S(y+2*h1+d1,x+w1+d2) - S(y+d1+h1+1,x+d2+w1) - (S(y+d1+2*h1,x+d2+1)-S(y+d1+h1+1,x+d2+1));

        % compute area of regions C, D and E for the second feature
        % HERE WE USE INTEGRAL IMAGE!
        area_C = S(y+d3+h2,x+d4+w2) - S(y+d3+1,x+d4+w2) - (S(y+d3+h2,x+d4+1) - S(y+d3+1,x+d4+1));
        area_D = S(y+d3+h2,x+d4+w2+w3) - S(y+d3+1,x+d4+w2+w3) - (S(y+d3+h2,x+d4+w2+1) - S(y+d3+1,x+d4+w2+1));
        area_E = S(y+d3+h2,x+d4+2*w2+w3) - S(y+d3+1,x+d4+2*w2+w3) - (S(y+d3+h2,x+d4+w2+w3+1) - S(y+d3+1,x+d4+w2+w3+1));  

        % compute features value
        F1 = area_B - area_A;
        F2 = area_D - (area_C + area_E);

        % cumulate the computed values
        FEAT_TEST = [FEAT_TEST; [F1 F2]];

    end

    %% Train a k-nn classifier and test the new windows
    input('Press enter to train a classifier on barcelona.jpg windows');
    FEAT_TRAIN = [FEAT_FACE; FEAT_NON_FACE]% features from barcelona
    group = [repmat(1, length(FEAT_FACE), 1); repmat(0, length(FEAT_NON_FACE), 1)];

    % This code is using ClassificationKNN from matlab 2012b. For a newest
    % version fitcknn must be used instead.
    % Call the function knnclassify
    %class = knnclassify(FEAT_TEST, features, Group,3)
    model = ClassificationKNN.fit(FEAT_TRAIN,group,'NumNeighbors',3);
    class = model.predict(FEAT_TEST)
    disp('KNN-classifier succesfully trained');
    disp(model);

    %% Visualize samples in the feature space
    input('Press enter to visualize the training samples (from barcelona.jpg)');

    % First, visualize the training samples:
    figure();
    hold on
    scatter(FEAT_FACE(:,1),FEAT_FACE(:,2),'g');
    scatter(FEAT_NON_FACE(:,1),FEAT_NON_FACE(:,2),'r');
    xlabel('Feature 1');
    ylabel('Feature 2');
    title('Feature space');

    % Second, visualize the test samples in two different colors
    input('Press enter to visualize the test samples (from madrid.jpg)');
    FEAT_FACE_TEST = FEAT_TEST(class==1,:);
    FEAT_NON_FACE_TEST = FEAT_TEST(class==2,:);

    scatter(FEAT_FACE_TEST(:,1),FEAT_FACE_TEST(:,2),'b');
    scatter(FEAT_NON_FACE_TEST(:,1),FEAT_NON_FACE_TEST(:,2),'m');
    xlabel('Feature 1 test');
    ylabel('Feature 2 test');
    title('Feature space');



    %% Visualize classification results in the test image
    % patches with faces
    input('Press enter to visualize classification windows over madrid.jpg');
    figure('name','madrid.jpg image with overlapping classified results');
    imshow(I);

    % Visualize image 'madrid.jpg' with used regions
    XY_TEST_FACE = XY_TEST(class==1,:);
    XY_TEST_NON_FACE = XY_TEST(class==0,:);

    for i = 1:size(XY_TEST_FACE,1)
        PATCH = [XY_TEST_FACE(i,:) L L];
        Rectangle = [PATCH(1) PATCH(2); PATCH(1)+PATCH(3) PATCH(2); PATCH(1)+PATCH(3) PATCH(2)+PATCH(4); PATCH(1)  PATCH(2)+PATCH(4); PATCH(1) PATCH(2)];
        hold on;
        plot (Rectangle(:,1), Rectangle(:,2), 'g');
    end

    for i = 1:size(XY_TEST_NON_FACE,1)
        PATCH = [XY_TEST_NON_FACE(i,:) L L];
        Rectangle = [PATCH(1) PATCH(2); PATCH(1)+PATCH(3) PATCH(2); PATCH(1)+PATCH(3) PATCH(2)+PATCH(4); PATCH(1)  PATCH(2)+PATCH(4); PATCH(1) PATCH(2)];
        hold on;
        plot (Rectangle(:,1), Rectangle(:,2), 'r');
    end
end